FIELD
{
    .1143.今年跨年度年假申请通过临时存放;
    .1143.入职日期;
    .1143.年假共计;
    .1143.本年度年假;
    .1143.跨年度可休年假;
    .1143.已休年假;
    .1143.可休年假;
    .1143.已交厦门社保年数;
}
VAR
{
    int cp, social_security_years, induction_interval_days, thisyear_days, current_last_days;
    int real_days_int, thisyear_vacation_int, afterOneYear_int, this_year_int;
    String induction_date, date_after_oneyear, afterOneYear, afterOneYear_month_day;
    String this_year, current_date, lastdate_afterOneYear, thisyear_vacation_intToString;
    String current_month_day;
    double total_vacation, real_days, thisyear_vacation, decimal, useable_vacation;
    double thisyear_vacation_stringToDouble, one, two, thisyear_vacation_before;
    double vacation_spilt_year;
}
CLIENT
{
    cp = CURRENT.iVALUE;
    induction_date = FW_GetValue(1143, 入职日期, cp);
    current_date = FW_GetSysDate(0);

    //计算入职日期到当前日期的间隔天数
    induction_interval_days = FW_SpanDateTime(current_date, induction_date, 2);
    induction_interval_days = induction_interval_days/24 + 1;

    thisyear_vacation = 0.00;
    if(induction_interval_days > 365)
    {
        afterOneYear_month_day = induction_date.Mid(4);    //取入职月日
        afterOneYear = induction_date.Left(4);    //取入职年份
        afterOneYear_int = afterOneYear.toIntege;
        afterOneYear_int = afterOneYear_int + 1;
        afterOneYear = afterOneYear_int.toString;
        date_after_oneyear = afterOneYear + afterOneYear_month_day;    //得到入职一年后的日期
        this_year = current_date.Left(4);
        this_year_int = this_year.toIntege;

        //入职一年或一年以上才会开始计算年假
        if(afterOneYear_int == this_year_int)
        {
            thisyear_vacation = 5.00;    //满一年后年假基数为5
            //取入职一年后的那一年最后日期和当前日期计算天数间隔，正数代表今年实际年假天数是（入职一年后的日期到今年最后日期的天数）除以（今年一年的总天数）乘以（年假基数）
            lastdate_afterOneYear = afterOneYear + "/12/31";
            current_last_days = FW_GetSysTime(lastdate_afterOneYear, current_date, 2);
            current_last_days = current_last_days/24 + 1;
            if(current_last_days > 0)
            {
                real_days = FW_SpanDateTime(lastdate_afterOneYear, date_after_oneyear, 2);
                real_days = real_days/24 + 1;   //带小数的入职一年后的日期到今年最后日期的天数
                real_days_int = FW_SpanDateTime(lastdate_afterOneYear, date_after_oneyear, 2);
                real_days_int = real_days_int/24 + 1;   //不带小数的入职一年后的日期到今年最后日期的天数

                thisyear_vacation = 5 * real_days/365;    //带小数的今年实际年假天数
                thisyear_vacation_int = 5 * real_days_int/365;    //不带小数的今年实际年假天数

                thisyear_vacation_intToString = thisyear_vacation_int.toString;
                thisyear_vacation_stringToDouble = thisyear_vacation_intToString.toDouble;
                decimal = thisyear_vacation - thisyear_vacation_stringToDouble;    //得到今年年假的小数部分

                //小数部分小于0.1的算0天，大等于0.1小于0.7的算0,5天，大等于0.7的算1天
                one = 0.10;
                two = 0.70;
                if((decimal >= 0)&&(decimal < one))
                {
                    thisyear_vacation = thisyear_vacation_stringToDouble;
                }else if((decimal >= one)&&(decimal < two))
                {
                    thisyear_vacation = thisyear_vacation_stringToDouble + 0.50;
                }else if(decimal >= two)
                {
                    thisyear_vacation = thisyear_vacation_stringToDouble + 1;
                }
            }
        }else if(afterOneYear_int < this_year_int)
        {
            //今年的年份要大于入职一年后的年份则开始计算额外条件，即在职满三年同时社保满十年不满二十年，或则在职满十年不满二十年，则年假为10天。社保满二十年同时在职满五年，或在职满二十年，则年假为15天
            thisyear_vacation = 5.00;
            social_security_years = FW_GetValue(1143, 已交厦门社保年数, cp);
            if((social_security_years >= 10)&&(social_security_years < 20)&&(induction_interval_days >= 1095))
            {
                thisyear_vacation = 10.00;
            }else if((social_security_years >= 20)&&(induction_interval_days >= 1825))
            {
                thisyear_vacation = 15.00;
            }else if((induction_interval_days >= 3650)&&(induction_interval_days < 7300))
            {
                thisyear_vacation = 10.00;
            }else if(induction_interval_days >= 7300)
            {
                thisyear_vacation = 15.00;
            }
        }
    }
    thisyear_vacation_before = FW_GetValue(1143, 本年度年假, cp);

    //如果计算出的实际今年年假要大于之前的今年年假则进行年假共计和可休年假的增加
    if(thisyear_vacation > thisyear_vacation_before)
    {
        total_vacation = FW_GetValue(1143, 年假共计, cp);
        total_vacation = thisyear_vacation - thisyear_vacation_before + total_vacation;
        useable_vacation = FW_GetValue(1143, 可休年假, cp);
        useable_vacation = thisyear_vacation - thisyear_vacation_before + useable_vacation;
        FW_SetValue_w(1143, 本年度年假, cp, thisyear_vacation);
        FW_SetValue_w(1143, 可休年假, cp, useable_vacation);
        FW_SetValue_w(1143, 年假共计, cp, total_vacation);
    }
    //取当前日期日月
    current_month_day = current_date.Mid(4);
    
    //新的一年恢复去年申请通过的跨年度年假
    if(current_month_day == "/01/01")
    {
        vacation_spilt_year = FW_GetValue(1143, 今年跨年度年假申请通过临时存放, cp);
        thisyear_vacation = FW_GetValue(1143, 本年度年假, cp);
        if(vacation_spilt_year == 0)
        {
            FW_SetValue_w(1143, 跨年度可休年假, cp, "0");
        }
        if(vacation_spilt_year > 0)
        {
            FW_SetValue_w(1143, 跨年度可休年假, cp, vacation_spilt_year);
        }
        total_vacation = thisyear_vacation + vacation_spilt_year;
        useable_vacation = total_vacation;
        FW_SetValue_w(1143, 已休年假, cp, 0);
        FW_SetValue_w(1143, 可休年假, cp, useable_vacation);
        FW_SetValue_w(1143, 年假共计, cp, total_vacation);
    }
    
}
SERVER
{
    if(thisyear_vacation > thisyear_vacation_before)
    {
        FW_SetValue_w(1143, 本年度年假, cp, thisyear_vacation);
        FW_SetValue_w(1143, 可休年假, cp, useable_vacation);
        FW_SetValue_w(1143, 年假共计, cp, total_vacation);
    }
    if(current_month_day == "/01/01")
    {
        FW_SetValue_w(1143, 已休年假, cp, 0);
        FW_SetValue_w(1143, 可休年假, cp, useable_vacation);
        FW_SetValue_w(1143, 年假共计, cp, total_vacation);
    }
}
